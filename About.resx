<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Af//gAH//4AB//+AAf//gAH//8AD///wB/8=
</value>
  </data>
</root>